package java;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/* Hash Table, Bit Manipulation.
 * You are given two strings s and t.
 * 
 * String t is generated by random shuffling string s and then add one more letter 
 * at a random position.
 * 
 * Return the letter that was added to t.
 * 
 * Constraints:
 *  0 <= s.length <= 1000
 *  t.length == s.length + 1
 *  s and t consist of lowercase English letters.
 * 
 * Test:
 * 1. normal cases
 * 2. null input
 * 3. edge cases: s.length = 0, s.length = 1000
 * 4. edge cases: t.length = 1, t.length = 1001
 * 5. letters appear more than once
 * 6. the one letter is added at the beginning/ end.
 */

/* Hashmap solution.
 * Time complexity: O(n)
 * Space complexity: O(n)
 */
class Solution {
    public char findTheDifference(String s, String t) {
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            // Record all letters in the hash map.
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        for (int j = 0; j < t.length(); j++) {
            // Appear in s but not in t.
            if (!map.containsKey(t.charAt(j))) {
                return t.charAt(j);
            }
            // Exist but different amount.
            if (map.get(t.charAt(j)) == 0) {
                return t.charAt(j);
            } else {
                map.put(t.charAt(j), map.get(t.charAt(j)) - 1);
            }
        }
        return 'a';
    }
}

/* Sort solution.
 * Time complexity: O(n)
 * Space complexity: O(n)
 */
class Solution2 {
    public char findTheDifference(String s, String t) {
        char[] sArr = s.toCharArray();
        char[] tArr = t.toCharArray();
        // Sort arrays.
        Arrays.sort(sArr);
        Arrays.sort(tArr);
        for (int i = 0; i < sArr.length; i++) {
            // Find difference in the same position.
            if (sArr[i] != tArr[i]) {
                return tArr[i];
            }
        }
        // The letter is inserted at the end.
        return tArr[tArr.length - 1];
    }
}

/* Array solution.
 * Time complexity: O(n)
 * Space complexity: O(n)
 */
class Solution3 {
    public char findTheDifference(String s, String t) {
        char[] count = new char[26];
        // Store the characters and their amount into an array.
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int j = 0; j < t.length(); j++) {
            // Find difference.
            if (count[t.charAt(j) - 'a'] == 0) {
                return t.charAt(j);
            }
            count[t.charAt(j) - 'a']--;
        }
        return 'a';
    }
}

/* XOR / Bit manipulation solution.
 * https://leetcode.com/problems/find-the-difference/solutions/1751380/java-c-python-very-very-easy-to-go-solution/
 * Time complexity: O(n)
 * Space complexity: O(1)
 */
class Solution4 {
    public char findTheDifference(String s, String t) {
        char res = 0;
        // Apply xor to all characters in s.
        for (char sc : s.toCharArray()) {
            res ^= sc;
        }
        // Apply xor to all characters in t.
        for (char tc : t.toCharArray()) {
            res ^= tc;
        }
        // Return the result, all the same characters are cancelled.
        return res;
    }
}

/* One loop version of solution4.
 */
class Solution5 {
    public char findTheDifference(String s, String t) {
        char res = t.charAt(t.length() - 1);
        for (int i = 0; i < s.length(); i++) {
            res ^= s.charAt(i);
            res ^= t.charAt(i);
        }

        return res;
    }
}

/* ASCII code solution.
 * https://leetcode.com/problems/find-the-difference/solutions/86850/simple-java-solution-add-all-characters-ascii-codes-and-substruct-to-find-the-added-character/
 * Time complexity: O(n)
 * Space complexity: O(1)
 */
class Solution6 {
    public char findTheDifference(String s, String t) {
        // Add the last letter in t first.
        int sum = t.charAt(t.length() - 1);
        for (int i = 0; i < s.length(); i++) {
            sum -= s.charAt(i);
            sum += t.charAt(i);
        }

        return (char) sum;
    }
}